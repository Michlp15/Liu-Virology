#Cluste Analysis #MYL
##Figure 5: Production of cytokines by acute, latent and chronic memory
# Stain list:
##CD8-PERCP, IL2-APC, TNFa-PECY7, IFNg-FITC, MIP1a-PE, CD90.1-PB
## Mouse label:
# Acute memory:M01-M11; Latent Memory:M12-M17; Chronic Memory:M18-M23; Naive P14:M24-M26


#Install packages
library(flowCore)
library(flowTrans) #flow cytometry data transformation
library(ggplot2) 
library(plyr)
library(tidyr)
library(RColorBrewer)


## set working directory
setwd("")
load("ics_memory.Rda")
ALL <- ics_with_label[,c(-5,-6)] #take out mouse label and infection type for data transformation

##ArcSinh transformation using flowTrans package
ALL<-as.matrix(ALL) #convert dataframe to matrix
ALL<-flowFrame(ALL) #convert matrix to flow frame
ALL_trans<-flowTrans(dat=ALL,fun="mclMultivArcSinh",colnames(ALL), n2f=FALSE,parameters.only = FALSE)
ALL_after_transformation<-exprs(ALL_trans$result)  #extract the transformed data
ALL<-as.data.frame(scale(ALL_after_transformation)) #scale the transformed data

##determine the number of clusters
set.seed(1L)
wss <- (nrow(ALL)-1)*sum(apply(ALL,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(ALL,algorithm = "Lloyd", centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
k <- 5

##kmeans clustering
set.seed(1L)
ALL_cluster<-kmeans(ALL,algorithm = "Lloyd",k,nstart = 10) #perform k-means clustering
ALL_after_cluster <- cbind(ALL,cluster=ALL_cluster$cluster) ##Add cluster to data


##Visualize the characteristics of clusters
#stacked density plot to show the characteristic of each cluster
#calculate the density of fluorescent molecules depending on the cluster
Density=NULL
for (i in 1:4){
  my.data <- as.data.frame(cbind( V1 = ALL_after_cluster[,i], cluster=ALL_after_cluster[,ncol(ALL_after_cluster)])) #take out cluster and combine with each fluorscence in each round
  res <- dlply(my.data, .(cluster), function(x) density(x$V1)) #calculate density of chosen molecules depending on cluster
  dd <- ldply(res, function(z){data.frame(Values = z[["x"]], 
                                          V1_density = z[["y"]],
                                          V1_count = z[["y"]]*z[["n"]])}) # take out the density and value from the result list
  dd$offest <- -0.4*dd$cluster # adjust an offset
  dd$V1_density_offest=dd$V1_density+dd$offest # add the offset to the density to avoid verical overlap
  Fluor <- colnames(ALL_after_cluster)[i] 
  DD <- cbind(dd$cluster,dd$Values,dd$V1_density_offest,dd$offest) #generate a dataset combining offset, density and original value
  colnames(DD) <- c("cluster",paste(Fluor,"Value"),paste(Fluor,"density_offset"),paste(Fluor,"offset"))
  Density <- cbind(Density,DD) #combine results of different molecules
}

##separate the dataset by molecules and add label
IFN_density <- as.data.frame(Density[,1:4])
colnames(IFN_density)<-c("cluster","FI","density","offset")

MIP1a_density <- as.data.frame(Density[,5:8])
colnames(MIP1a_density)<-c("cluster","FI","density","offset")

TNF_density <- as.data.frame(Density[,9:12])
colnames(TNF_density)<-c("cluster","FI","density","offset")

IL2_density <- as.data.frame(Density[,13:16])
colnames(IL2_density)<-c("cluster","FI","density","offset")


#plot the characteristics of 5 clusters (Figure 5C)
ggplot(IFN_density, aes(x=FI, y=density,group=cluster)) + 
  geom_line(color="white") + geom_ribbon(aes(FI, ymin=offset,ymax=density),alpha=0.5) + 
  scale_y_continuous(breaks=NULL) +
  ggtitle("") + xlab("") + ylab("") +
  theme(panel.background = element_rect(fill="white",colour = "black", size = 0.75), axis.text.x=element_blank(), 
        axis.text.y=element_blank(), axis.title.x=element_blank(),
        axis.ticks=element_blank()) + theme_bw()

ggplot(MIP1a_density, aes(x=FI, y=density,group=cluster)) + 
  geom_line(color="white") + geom_ribbon(aes(FI, ymin=offset,ymax=density),alpha=0.5) + 
  scale_y_continuous(breaks=NULL) +
  ggtitle("") + xlab("") + ylab("") +
  theme(panel.background = element_rect(fill="white",colour = "black", size = 0.75), axis.text.x=element_blank(), 
        axis.text.y=element_blank(), axis.title.x=element_blank(),
        axis.ticks=element_blank()) + theme_bw()

ggplot(TNF_density, aes(x=FI, y=density,group=cluster)) + 
  geom_line(color="white") + geom_ribbon(aes(FI, ymin=offset,ymax=density),alpha=0.5) + 
  scale_y_continuous(breaks=NULL) +
  ggtitle("") + xlab("") + ylab("") +
  theme(panel.background = element_rect(fill="white",colour = "black", size = 0.75),  axis.text.x=element_blank(), 
        axis.text.y=element_blank(), axis.title.x=element_blank(),
        axis.ticks=element_blank()) + theme_bw() 

ggplot(IL2_density, aes(x=FI, y=density,group=cluster)) + 
  geom_line(color="white") + geom_ribbon(aes(FI, ymin=offset,ymax=density),alpha=0.5) + 
  scale_y_continuous(breaks=NULL) +
  ggtitle("") + xlab("") + ylab("") +
  theme(panel.background = element_rect(fill="white",colour = "black", size = 0.75),  axis.text.x=element_blank(), 
        axis.text.y=element_blank(), axis.title.x=element_blank(),
        axis.ticks=element_blank()) + theme_bw()

##add back the mouse label
mouse_label <- as.matrix(ics_with_label)[,5]
ALL_after_cluster<- cbind(ALL_after_cluster, mouse=mouse_label)

##create a function to calculate percentage of cells in each cluster
r=0
cluster_ratio<-function(x){
  for (i in 1:k){
    count<-length(x[x==i])
    ratio<-round(count/length(x),4)*100
    r[i]=ratio
  }
  return(r)
}

#apply the cluster_ratio function to calculate the percentage of cell in each cluster
result_of_all<-as.matrix(aggregate(ALL_after_cluster$cluster, by=list(ALL_after_cluster$mouse), FUN=cluster_ratio))
colnames(result_of_all)<-c("mouse","Cluster1","Cluster2","Cluster3",'Cluster4',"Cluster5")
print(result_of_all)

##create infection label
infection<-c(rep("ARM",11),rep("MHV",6),rep("CL13",6),rep("Naive",3)) #"ARM",LCMV ARM;"MHV",MHV68-GP33;"CL13",LCMV CLONE 13
result_of_all<-cbind(result_of_all,infection=infection) #add the label to result_of_all
result_of_all<-as.data.frame(result_of_all)

##remove infection label
result_of_all_1 <- result_of_all[,c(-1,-(k+2))]

##build a convert_to_numeric function
numeric_conversion<- function(x){
  for (i in 1:ncol(x)){
    x[,i] = as.numeric(as.character(x[,i]))
  }
  return(x)
}

##convert factor to numeric
result_of_all <- cbind(numeric_conversion(result_of_all_1),infection = result_of_all[,k+2])

#Aggregate the result by infections for analysis
ALL_gather <- gather(result_of_all,"cluster","percentage_of_cluster", -infection) #gather the data using tidyr package
mean_for_rose<-as.data.frame(aggregate(ALL_gather$percentage_of_cluster, by=list(ALL_gather$infection,ALL_gather$cluster), FUN=mean)) ##calculate the mean percentage of cells in each cluster
sd_for_rose<-as.data.frame(aggregate(ALL_gather$percentage_of_cluster, by=list(ALL_gather$infection,ALL_gather$cluster), FUN=sd)) ##calculate the standard deviation
ALL_for_rose <-cbind(mean_for_rose,sd_for_rose[,3]) #generate a dataset that have mean and sd
colnames(ALL_for_rose) <- c("infection","cluster","percentage_of_cluster","sd")

#generate a barplot showing the distribution of CD90.1 cells
#plot all infections
ALL_bar <- ggplot(ALL_for_rose, aes(x=cluster, y=percentage_of_cluster,group=cluster, fill = cluster)) + geom_bar(width = 1, stat="identity",colour="black") +
  geom_errorbar(aes(ymin= percentage_of_cluster, ymax=percentage_of_cluster + sd),colour="black") +facet_grid(.~infection)+ scale_fill_brewer() + scale_color_brewer()
#plot each infection individually
ARM_bar <- ggplot(ALL_for_rose[ALL_for_rose$infection=="ARM",], aes(x=cluster, y=percentage_of_cluster,group=cluster, fill = cluster)) + geom_bar(width = 1, stat="identity",colour="black") + 
  geom_errorbar(aes(ymin= percentage_of_cluster, ymax=percentage_of_cluster + sd),colour = "black")+ scale_fill_brewer() + scale_color_brewer()
CL13_bar <- ggplot(ALL_for_rose[ALL_for_rose$infection=="CL13",], aes(x=cluster, y=percentage_of_cluster, group= cluster,fill = cluster)) + geom_bar(width = 1, stat="identity",colour="black") + 
  geom_errorbar(aes(ymin= percentage_of_cluster, ymax=percentage_of_cluster + sd), colour = "black")+ scale_fill_brewer() + scale_color_brewer()
MHV_bar <- ggplot(ALL_for_rose[ALL_for_rose$infection=="MHV",], aes(x=cluster, y=percentage_of_cluster, grouop=cluster ,fill = cluster)) + geom_bar(width = 1, stat="identity",colour="black") + 
  geom_errorbar(aes(ymin= percentage_of_cluster, ymax=percentage_of_cluster + sd), colour = "black")+ scale_fill_brewer() + scale_color_brewer()
Naive_bar <- ggplot(ALL_for_rose[ALL_for_rose$infection=="Naive",], aes(x=cluster, y=percentage_of_cluster, grouop=cluster ,fill = cluster)) + geom_bar(width = 1, stat="identity",colour="black") + 
  geom_errorbar(aes(ymin= percentage_of_cluster, ymax=percentage_of_cluster + sd), colour = "black")+ scale_fill_brewer() + scale_color_brewer()

#convert the barplot to rose diagram
ALL_bar + scale_y_continuous(breaks = c(0,10,20,30,40,50,60)) + coord_polar() + labs(x = "", y = "") + ggtitle("") +
  facet_wrap(~ infection, nrow = 2) 
#plot each infection individually (Figure 4D)
ARM_bar + scale_y_continuous(breaks=c(0,10,20,30,40,50,60),limits = c(0,65)) + coord_polar() + labs(x = "", y = "") + ggtitle("") + theme_bw() + theme(legend.position="none",panel.background = element_rect(fill="white",colour = "black", size = 0.75), 
                                                                                                                                                    axis.text.x=element_blank(), 
                                                                                                                                                    axis.text.y=element_blank(),
                                                                                                                                                    axis.ticks=element_blank(),
                                                                                                                                                    panel.grid.major = element_line(colour = "gray",size=0.75),
                                                                                                                                                    axis.title.x=element_blank())
CL13_bar + scale_y_continuous(breaks=c(0,10,20,30,40,50,60),limits = c(0,65)) + coord_polar() + labs(x = "", y = "") + ggtitle("") + theme_bw() + theme(legend.position="none",panel.background = element_rect(fill="white",colour = "black", size = 0.75), 
                                                                                                                                                     axis.text.x=element_blank(), 
                                                                                                                                                     axis.text.y=element_blank(),
                                                                                                                                                     axis.ticks=element_blank(),
                                                                                                                                                     panel.grid.major = element_line(colour = "gray",size=0.75),
                                                                                                                                                     axis.title.x=element_blank())
MHV_bar + scale_y_continuous(breaks=c(0,10,20,30,40,50,60),limits = c(0,65)) + coord_polar() + labs(x = "", y = "") + ggtitle("")  + theme_bw() + theme(legend.position="none",panel.background = element_rect(fill="white",colour = "black", size = 0.75), 
                                                                                                                                                     axis.text.x=element_blank(), 
                                                                                                                                                     axis.text.y=element_blank(),
                                                                                                                                                     axis.ticks=element_blank(),
                                                                                                                                                     panel.grid.major = element_line(colour = "gray",size=0.75),
                                                                                                                                                     axis.title.x=element_blank())

Naive_bar + scale_y_continuous(limits = c(0,75)) + coord_polar() + labs(x = "", y = "") + ggtitle("")  + theme_bw() + theme(legend.position="none",panel.background = element_rect(fill="white",colour = "black", size = 0.5), 
                                                                                                                            axis.text.x=element_blank(), 
                                                                                                                            axis.text.y=element_blank(),
                                                                                                                            axis.ticks=element_blank(),
                                                                                                                            panel.grid.major = element_line(colour = "gray",size=0.5),
                                                                                                                            axis.title.x=element_blank())



#compare across infections
result_to_compare <- result_of_all[result_of_all$infection != "Naive",]
##ANOVA to compare the effects of various infections on expression of cytokine on CD8
#Cluster 1
AOV_C1<- aov (Cluster1~infection, data = result_to_compare)
summary(AOV_C1)
TukeyHSD(AOV_C1) #multiple comparison
#Cluster 2
AOV_C2<- aov (Cluster2~infection, data = result_to_compare)
summary(AOV_C2)
TukeyHSD(AOV_C2)
#Cluster 3
AOV_C3<- aov (Cluster3~infection, data = result_to_compare)
summary(AOV_C3)
TukeyHSD(AOV_C3)
#Cluster 4
AOV_C4<- aov (Cluster4~infection, data = result_to_compare)
summary(AOV_C4)
TukeyHSD(AOV_C4)
#Cluster 5
AOV_C5<- aov (Cluster5~infection, data = result_to_compare)
summary(AOV_C5)
TukeyHSD(AOV_C5)





